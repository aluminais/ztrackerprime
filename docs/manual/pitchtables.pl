#########################################################################
#
# FILE  pitchtables.pl
# $Id: pitchtables.pl,v 1.1 2001/09/08 13:59:36 tlr Exp $
#
# DESCRIPTION 
#   Perl code that generates the pitchbend tables.
#
# This file is part of ztracker - a tracker-style MIDI sequencer.
#
# Copyright (c) 2001, Daniel Kahlin <tlr@users.sourceforge.net>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the names of the copyright holders nor the names of their
#    contributors may be used to endorse or promote products derived 
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ``AS IS´´ AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
######
sub gen_pitchtable1($$);
sub gen_pitchtable2($);
sub calc_bendvalue($$);

# head
print <<EOF;
%
% Do not edit this file!
% It was automatically generated by $0.
%
EOF

# body
gen_pitchtable2(12);
gen_pitchtable2(24);
gen_pitchtable1(1,12);

# tail
print <<EOF;
% eof
EOF

exit 0;


#########################################################################
#
# NAME  gen_pitchtable1()
#
# SYNOPSIS
#   gen_pitchtable1 ($minbendrange,$maxbendrange)
#
# DESCRIPTION
#   Dump a matrix of pitch bend values. X-axis is bend range, and 
#   Y-axis is actual bend in semi tones.
#
# INPUTS
#   $minbendrange    - the minimum bend range to calculate
#   $maxbendrange    - the maximum bend range to calculate
#
# RESULT
#   none
#
# KNOWN BUGS
#   none
#
######
sub gen_pitchtable1($$)
{
    my $minbendrange=shift;
    my $maxbendrange=shift;

# head
    print <<EOF;
\\begin{table}
\\begin{scriptsize}
EOF

# generate the \begin{tabular}{...}
    print "\\begin{tabular}{|l|";
    for ($range=$maxbendrange; $range >= $minbendrange; $range--) {
        print "l|";
    }
    print "}\n";

# table header
    print "\\hline\n";
    print "semi";
    for ($range=$maxbendrange; $range >= $minbendrange; $range--) {
        print " & ", $range;
    }
    print " \\\\\n";

# table data
    for ($bend=$maxbendrange; $bend >= -$maxbendrange; $bend--) {
        print "\\hline\n";
        print $bend;
        for ($range=12; $range > 0; $range--) {
            if ($range >= $bend && -$range <= $bend ) {
                $value=calc_bendvalue($range,$bend);
                printf " & \\pc{%04X}", $value;
            } else {
                print " & \\pc{----}";
            }
        }
        print " \\\\\n";
    }

# tail
    print <<EOF;
\\hline
\\end{tabular}
\\end{scriptsize}
\\caption[Pitchbend Values for Bend Ranges $minbendrange-$maxbendrange]{Pitchbend Values for Bend Ranges $minbendrange-$maxbendrange}
\\end{table}
EOF
}

#########################################################################
#
# NAME  gen_pitchtable2()
#
# SYNOPSIS
#   gen_pitchtable2 ($bendrange)
#
# DESCRIPTION
#   Dump a table of all pitch bend values for a particular bend range.
#   X-axis is bend in semi tones. 
#
# INPUTS
#   $bendrange       - the bend range to dump table for
#
# RESULT
#   none
#
# KNOWN BUGS
#   none
#
######
sub gen_pitchtable2($)
{
    my $bendrange=shift;

# head
    print <<EOF;
\\begin{table}
\\begin{scriptsize}
EOF

    $width=12;

# generate the \begin{tabular}{...}
    print "\\begin{tabular}{|";
    for ($i=0; $i < $width; $i++) {
        print "l|";
    }
    print "}\n";

    $maxbend=$bendrange;
    while (($maxbend-$width+1)>=-$bendrange) {
        $minbend=$maxbend-$width+1;

# generate head row
        print "\\hline\n";

        for ($bend=$maxbend; $bend >= $minbend; $bend--) {
            ($bend!=$maxbend) and print " & ";
            print $bend;
        }
        print " \\\\\n";

# generate data row
        print "\\hline\n";
        for ($bend=$maxbend; $bend >= $minbend; $bend--) {
            ($bend!=$maxbend) and print " & ";
            $value=calc_bendvalue($bendrange,$bend);
            printf "\\pc{%04X}", $value;
        }
        print " \\\\\n";
        print "\\hline";

        $maxbend-=$width;
        if ($maxbend==0) {
            $maxbend--;
            print "\\hline";
        }
    }
    print "\n";

# tail

    print <<EOF;
\\end{tabular}
\\end{scriptsize}
\\caption[Pitchbend Values for Bend Range $bendrange]{Pitchbend Values for Bend Range $bendrange}
\\end{table}
EOF
}

#########################################################################
#
# NAME  calc_bendvalue()
#
# SYNOPSIS
#   $value=calc_bendvalue ($bendrange,$bend)
#
# DESCRIPTION
#   Convert a bend range and a bend in semi tones to a pitch bend value.
#
# INPUTS
#   $bendrange       - bend range
#   $bend            - bend in semi tones
#
# RESULT
#   $value           - pitch bend value
#
# KNOWN BUGS
#   Does no handle out of range input parameters.
#
######
sub calc_bendvalue($$)
{
    my $bendrange=shift;
    my $bend=shift;

# calculate
    $value=(8192 + (8192 / $bendrange) * $bend);

# maximum positive bends are adjusted to 16383
    ($value > 16383) and $value=16383;

# round to closest
    $value=int($value+0.5); 

    return $value;
}
# eof
